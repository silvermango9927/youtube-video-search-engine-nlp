# -*- coding: utf-8 -*-
"""slingshot_youtube_project

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1kuRK3Uc8LS66NLArs0JAmS_79MN_4d8u
"""

!pip install youtube-search
!pip install youtube_transcript_api

!pip install nltk

from youtube_search import YoutubeSearch
query = input('Query here... ')
results = YoutubeSearch(query, max_results=1).to_dict()
for result in results:
  link = 'youtube.com'+ result['url_suffix']
  id = result['id']

  print('Here you will get the video that you are looking for : ', link)
  with open('ytbase.txt', 'w') as f:
    f.write(id)
    f.write('\n')

from youtube_transcript_api import YouTubeTranscriptApi
from collections import Counter
from sklearn.metrics.pairwise import cosine_similarity
import nltk
nltk.download('punkt')
nltk.download('stopwords')

with open('ytbase.txt', 'r') as f:
  lines = f.readlines()
  for line in lines:
    transcript = YouTubeTranscriptApi.get_transcript(line)

sw = nltk.corpus.stopwords.words('english') 
query_text = nltk.tokenize.word_tokenize(query)
query_set = {w for w in query_text if not w in sw}
query_vals = Counter(query_set)
# print(query_vals)

for frame in transcript:
  trans_text = nltk.tokenize.word_tokenize(frame['text'])
  transcript_set = {x for x in trans_text if not x in sw}
  trans_time = frame['start']
  end_time = float(frame['start']) + float(frame['duration'])
  # print(transcript_set)

  transcript_vals = Counter(transcript_set)
  # print(transcript_vals)

  words  = list(query_vals.keys() | transcript_vals.keys())
  query_vect = [query_vals.get(word, 0) for word in words]       
  transcript_vect = [transcript_vals.get(word, 0) for word in words] 
  # print(query_vect)
  # print(transcript_vect)

  if (cosine_similarity([query_vect], [transcript_vect])) > 0.5:
    print("You will find your answer in between :", trans_time, 'and', end_time)
  # else:
  #   print('Answer is probably somewhere else')

